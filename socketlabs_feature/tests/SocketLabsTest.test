<?php

/**
 * @file
 */

class SocketLabsTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => t('SOCKET LABS TEST'),
      'description' => t('Custom Selenium Test to test the socketlabs content filters'),
      'group' => 'Feeds',
    );
  }
  
  protected function setUp() {
  	parent::setUp('feeds_xpathparser', 'socketlabs_feature');
  	$this->resetAll();
  	$admin_user = $this->drupalCreateUser(array(
  	  "access administration pages",
      "access all views",
      "access content",
      "administer features",
      "administer feeds",
      "administer feeds_tamper",
      "administer nodes",
      "bypass node access",
      "create failed_mail_node content",
      "create feed content",
      "create feedback_loop_report content",
      "create messages_open_click_node content",
      "create messages_processed_node content",
      "create messages_queued_node content",
      "create page content",
      "create xml_failed_feed content",
      "create xml_feedback_loop_report content",
      "create xml_messages_processed content",
      "create xml_messages_queued content",
      "create xml_open_click content",
      "delete any failed_mail_node content",
      "delete any feedback_loop_report content",
      "delete any messages_open_click_node content",
      "delete any messages_processed_node content",
      "delete any messages_queued_node content",
      "delete any page content",
      "delete any xml_failed_feed content",
      "delete any xml_feedback_loop_report content",
      "delete any xml_messages_processed content",
      "delete any xml_messages_queued content",
      "delete any xml_open_click content",
      "edit any failed_mail_node content",
      "edit any feedback_loop_report content",
      "edit any messages_open_click_node content",
      "edit any messages_processed_node content",
      "edit any messages_queued_node content",
      "edit any page content",
      "edit any xml_failed_feed content",
      "edit any xml_feedback_loop_report content",
      "edit any xml_messages_processed content",
      "edit any xml_messages_queued content",
      "edit any xml_open_click content",
      "import failed_mail_importer feeds",
      "import feed feeds",
      "import feedback_loop_importer feeds",
      "import messages_open_click_importer feeds",
      "import messages_processed_importer feeds",
      "import messages_queued_importer feeds",
      "import node feeds",
      "search content",
      ));
      $this->drupalLogin($admin_user);
  }

  protected function testProperInstall() {
    cache_clear_all('plugins:feeds:plugins', 'cache');
    
    //Ensures the feature was installed successfully
    $this->drupalGet('');
    $this->assertText(t('Welcome to Drupal'), t('Confirm that the front page was properly retrieved'));
    $tabNames = array('Failed Mail', 'Feedback Loop Mail', 'Processed Messages', 'Queued Messages', 'Open/Click Mail', 'Import');
    foreach ($tabNames as $tab) {
      $this->assertLink (t($tab), 0, t('The '.$tab.' tab is present'));
    }
    
    //Tests the following tabs for proper fields and selects present
    $tabLinks = array('Failed Mail', 'Processed Messages', 'Queued Messages');
    foreach ($tabLinks as $tab)
    {
      $this->clickLink(t($tab));
      $this->assertResponse(200, t('The tab '.$tab.' loaded properly'));
      $this->pass(t('TESTING THE '.$tab.' TAB'));
      $textInput = array ('Filter: Sent From', 'Filter: Sent To', 'Filter: Start Date', 'Filter: End Date');
      foreach ($textInput as $text) {
        $this->assertText(t($text), t('The filter: ' . $text . ' is present'));
      }
      $optionSelected = array('fromaddress', 'toaddress');
      foreach ($optionSelected as $option) {
        $this->assertOptionSelected(t('edit-field-'.$option.'-value-op'), t('contains'), t('The ' . $option . ' select field is present'));
        $this->assertFieldById(t('edit-field-'.$option.'-value'), t(''), t('The '.$option.' input field is present'));
      }
      $dateOptionSelected = array('value-year', 'value-month', 'value-day', '1-value-year', '1-value-month', '1-value-day');
      foreach ($dateOptionSelected as $option){
        $this->assertOptionSelected(t('edit-field-date-value-'.$option), t(''), t('The select is present for '.$option.' and the default is correct'));
      }
      $this->assertNoRaw(t('views-table'), t('There should be no table, so there is no div with class views-table'));
      
      $edit = array (
        'field_toaddress_value' => $this->randomName(20),
        'field_fromaddress_value' => $this->randomName(20),
        'field_date_value[value][year]' => '2011',
        'field_date_value[value][month]' => '3',
        'field_date_value[value][day]' => '15',
        'field_date_value_1[value][year]' => '2011',
        'field_date_value_1[value][month]' => '9',
        'field_date_value_1[value][day]' => '20',
      );
      $this->drupalPost(NULL, $edit, t('Apply'));
      $this->assertResponse(200, t('The query was successfully passed and processed'));
      $this->assertNoRaw(t('views-table'), t('No results should be present for this query, as no results are present'));
    }
    
    
    
    //Tests the Feedback Loop Mail tab and search fields
    $this->clickLink(t('Feedback Loop Mail'));
    $this->assertResponse(200, t('The FEEDBACK LOOP MAIL tab was loaded properly'));
    
    $feedback_text = array('Filter: Start Date', 'Filter: End Date');
    $dateOptionSelected = array('value-year', 'value-month', 'value-day', '1-value-year', '1-value-month', '1-value-day');
    for ($i = 0; $i < count($feedback_text); $i++) {
      $this->assertText(t($feedback_text[$i]), t('The '.$feedback_text[$i].' filter is present'));
      for ($j = ($i*3); $j < ((count($dateOptionSelected)/2)+($i*3)); $j++){
        $this->assertOptionSelected(t('edit-field-date-value-'.$dateOptionSelected[$j]), t(''), t('Select is present for '.$dateOptionSelected[$j].' is present and default filter is correct'));
      }
    }
    
    $feedback_text = array('Filter: Sent From', 'Filter: Original Recipient', 'Filter: Type');
    $fieldOptions = array('fromaddress', 'original-recipient', 'type');
    for($option = 0; $option < 3; $option++) {
      $this->assertText(t($feedback_text[$option]), t('The '. $feedback_text[$option] .' is present'));
      $this->assertOptionSelected(t('edit-field-'.$fieldOptions[$option].'-value-op'), t('contains'), t('Select is present for '.$fieldOptions[$option]. ' and default filter is correct (this will fail once)'));
      $this->assertFieldById(t('edit-field-'.$fieldOptions[$option].'-value'), t(''), t('The '.$fieldOptions[$option]. ' input field is present')); 
    }
    
    
    $edit = array (
      'field_original_recipient_value' => $this->randomName(20),
      'field_fromaddress_value' => $this->randomName(20),
      'field_type_value' => $this->randomName(20),
    );
    $this->drupalPost(NULL, $edit, t('Apply'));
    $this->assertResponse(200, t('The query was successfully passed and processed'));
    $this->assertNoRaw(t('views-table'), t('No results should be present for this query, as no results are present'));
    
    
    //Tests the Open/Click Mail tab and search fields
    $this->clickLink(t('Open/Click Mail'));
    $this->assertResponse(200, t('The OPEN/CLICK tab was loaded properly'));
    
    $feedback_text = array('Filter: Start Date', 'Filter: End Date');
    $dateOptionSelected = array('value-year', 'value-month', 'value-day', '1-value-year', '1-value-month', '1-value-day');
    for ($i = 0; $i < count($feedback_text); $i++) {
      $this->assertText(t($feedback_text[$i]), t('The '.$feedback_text[$i].' filter is present'));
      for ($j = ($i*3); $j < ((count($dateOptionSelected)/2)+($i*3)); $j++){
        $this->assertOptionSelected(t('edit-field-date-value-'.$dateOptionSelected[$j]), t(''), t('Select is present for '.$dateOptionSelected[$j].' is present and default filter is correct'));
      }
    }
    $this->assertText(t('Filter: Original Recipient'), t('The ORIGINAL RECIPIENT filter is present'));
    $this->assertOptionSelected(t('edit-field-original-recipient-value-op'), t('contains'), t('Select is present for Original Recipient filter, and default filter is correct'));
    $this->assertFieldById(t('edit-field-original-recipient-value'), '', t('The original recipient input field is present'));
    
    //Checks to make sure all of the import options are available
    $this->drupalGet('');
    $this->clickLink(t('Import'));
    $this->assertResponse(200, 'User has privilege to import a feed');
    $feed_links = array('xml failed feed', 'xml feedback loop feed', 'xml open click', 'xml messages processed', 'xml messages queued');
    foreach ($feed_links as $link)
    {
      $this->assertLink(t($link), 0, t($link . ' is present and clickable'));
    }
    
    
    //--------------Testing the Failed Feed Report page----------------//
    $this->clickLink(t('xml failed feed'));
    $this->assertResponse(200, 'The failed feed options page loaded correctly');
    $this->assertFieldById(t('edit-feeds-feedshttpfetcher-source'), '', t('The edit URL field is present'));
    
    $xpath_field_names = array('MessageId', 'MailingId', 'ToAddress', 'FromAddress', 'FailureType', 'FailureCode', 'Reason', 'AccountId', '//totalCount', 'DateTime');
    for($i = 2; $i < 12; $i++) {
      $this->assertFieldById(t('edit-feeds-feedsxpathparserxml-xpath-sources-xpathparser'.$i), t($xpath_field_names[($i-2)]), t('The field '.$xpath_field_names[($i-2)]. ' is present and set to the proper default setting'));
    }
    
    //--------------Now testing the Feedback loop report page--------------//
    $this->drupalGet('node/add/xml-feedback-loop-report');
    $this->assertResponse(200, 'The FEEDBACK LOOP FEED options page loaded correctly');
    $this->assertText(t('Create xml feedback loop feed'), t('The proper import page has been loaded'));
    
    
    $xpath_field_names = array('MessageId', 'FromAddress', 'MailingId', 'OriginalRecipient', 'Type', 'UserAgent', 'AccountId', 'DateTime');
    $this->assertFieldById(t('edit-feeds-feedsxpathparserxml-xpath-context'), t('//item'), t('The Context field is present and set to the proper default setting'));
    $this->assertFieldById(t('edit-feeds-feedsxpathparserxml-xpath-sources-xpathparser1'), t('MessageId'), t('The field_messageid is present and set to the proper default setting'));
    for ($i = 3; $i < 10; $i++) {
      $this->assertFieldById(t('edit-feeds-feedsxpathparserxml-xpath-sources-xpathparser'.$i), t($xpath_field_names[($i-2)]), t('The field '.$xpath_field_names[($i-2)].' is present and set to the proper default setting'));
    }
  
    //-----------Now testing the Processed Messages report page--------------//
    $this->drupalGet('node/add/xml-messages-processed');
    $this->assertResponse(200, 'The PROCESSED MESSAGES options page loaded correctly');
    $this->assertText(t('Create xml messages processed'), t('The proper import page has been loaded'));
    $this->assertFieldById(t('edit-feeds-feedsxpathparserxml-xpath-context'), t('//item'), t('The Context field is present and set to the proper default setting'));
    $this->assertFieldById(t('edit-feeds-feedsxpathparserxml-xpath-sources-xpathparser1'), t('MessageId'), t('The field_messageid is present and set to the proper default setting'));
    
    $xpath_field_names = array('Disposition', 'FromAddress', 'LocalIp', 'MailingId', 'MessageSize', 'Response', 'ToAddress', 'AccountId', 'DateTime');
    for ($i = 3; $i < 11; $i++) {
      $this->assertFieldById(t('edit-feeds-feedsxpathparserxml-xpath-sources-xpathparser'.$i), t($xpath_field_names[($i-3)]), t('The field '.$xpath_field_names[($i-3)].' is present and set to the proper default setting'));
    }
    
    //----------Now testing the Queued Messages report page------------------//
    $this->drupalGet('node/add/xml-messages-queued');
    $this->assertResponse(200, 'The QUEUED MESSAGES options page loaded correctly');
    $this->assertText(t('Create xml messages queued'), t('The proper import page has been loaded'));
    $this->assertFieldById(t('edit-feeds-feedsxpathparserxml-xpath-context'), t('//item'), t('The Context field is present and set to the proper default setting'));

    $xpath_field_names = array('MessageId', 'FromAddress', 'MailingId', 'MessageSize', 'ToAddress', 'AccountId', 'DateTime');
    for ($i = 2; $i < 9; $i++) {
      $this->assertFieldById(t('edit-feeds-feedsxpathparserxml-xpath-sources-xpathparser'.$i), t($xpath_field_names[($i-2)]), t('The field '.$xpath_field_names[($i-2)].' is present and set to the proper default setting'));
      
    }
    
    //----------Now testing the Open/Click Messages report page-------------//
    $this->drupalGet('node/add/xml-open-click');
    $this->assertResponse(200, 'The OPEN/CLICK options page loaded correctly');
    $this->assertText(t('Create xml open click'), t('The proper import page has been loaded'));
    $this->assertFieldById(t('edit-feeds-feedsxpathparserxml-xpath-context'), t('//item'), t('The Context field is present and set to the proper default setting'));
    
    $xpath_field_names = array('MessageId', 'MailingId', 'OriginalRecipient', 'EventType', 'URL', 'RemoteIp', 'AccountId', 'DateTime');
    for ($i = 2; $i < 10; $i++) {
      $this->assertFieldById(t('edit-feeds-feedsxpathparserxml-xpath-sources-xpathparser'.$i), t($xpath_field_names[($i-2)]), t('The field '.$xpath_field_names[($i-2)].' is present and set to the proper default setting'));
    }
    
    
    /*
    * The following tests how each feed responsds to different bad URL's. First a random
    * url, then a url without credentials, and finally a valid url not of the socketlabs
    * variety.
    */
    $feed_names = array('xml-failed-feed', 'xml-feedback-loop-report', 'xml-messages-processed', 'xml-open-click', 'xml-messages-queued');
    foreach($feed_names as $feed_name) {
      $this->drupalGet('node/add/'. $feed_name);
      $this->assertResponse(200, 'The '.$feed_name.' creation page loaded properly');
      
      $edit = array(
        'feeds[FeedsHTTPFetcher][source]' => $this->randomName(50),
        'title' => $this->randomName(20),
      );
      $this->drupalPost(NULL, $edit, t('Save'));
      $this->assertText(t('cURL error'), t('The URL is random, so there is a very good chance there is a cURL error'));
      
      $edit= array(
        'feeds[FeedsHTTPFetcher][source]' => 'https://api.socketlabs.com/v1/messagesProcessed?serverId=4068&type=xml',
        'title' => $this->randomName(20),
      );
      $this->drupalGet('node/add/'.$feed_name);
      $this->drupalPost(NULL, $edit, t('Save'));
      $this->assertText(t('failed with code 401'), t('Because no credentials were given, there should be a 401 - Unauthorized Access error'));
      
      //Tests the error generated by a URL not of the type we are looking for (in this case, Engadget)    
      $edit= array(
        'feeds[FeedsHTTPFetcher][source]' => 'http://www.engadget.com/rss.xml',
        'title' => 'Engadget',
      );    
      $node_count = 0;
      $this->drupalGet('node/add/xml-feedback-loop-report');
      $this->drupalPost(NULL, $edit, t('Save'));
      $this->assertResponse(200, t('This is a valid URL, but invalid XML returned'));
      $this->assertText(t('There are no new nodes'), t('No new nodes were created with ' . $edit['feeds[FeedsHTTPFetcher][source]']));
      
    }
    
    
    
    
    /*
    * The following tests how each feed reacts to proper API calls. This is
    * commented out for now in an effort to conserve API calls. To test fully,
    * uncomment this section
    */
    /*
    $socketlabs_url = array('messagesFailed', 'messagesFblReported', 'messagesQueued', 'messagesProcessed');
    $drupal_create_url = array('xml-failed-feed', 'xml-feedback-loop-report', 'xml-messages-queued', 'xml-messages-processed');
    $drupal_page_url = array('failed_mail','feedback_loop', 'queued_messages', 'processed_messages');
    $drupal_type = array('xml failed feed', 'xml feedback loop feed', 'xml messages queued', 'xml messages processed');
    $sql_type = array('failed_mail_node','feedback_loop_report', 'messages_queued_node', 'messages_processed_node');
    
    for($i = 0; $i < count($socketlabs_url); $i++) {
      $this->drupalGet('node/add/'.$drupal_create_url[$i]);
      $edit = array(
        'feeds[FeedsHTTPFetcher][source]' => 'https://chrisayala09:8xWlFFfKDHfiT8GUHAlP@api.socketlabs.com/v1/'.$socketlabs_url[$i].'?serverId=4068&type=xml',
        'title' => $this->randomName(10),
      );
      
      $this->drupalPost(NULL, $edit, t('Save'));
      $return_content = $this->drupalGetContent();
      $this->assertResponse(200, t($edit['feeds[FeedsHTTPFetcher][source]'] . ' is a valid Feedback Loop Report URL'));
      $this->assertRaw(t('<li>'.$drupal_type[$i].' <em class="placeholder">'.$edit['title'].'</em> has been created.</li>'), t('Page created successfully'));
      
      $this->drupalGet('');
      $this->assertText(t($edit['title']), t('The feed ' . $edit['title'] . ' appears on the home page'));
      $this->drupalGet('socketlabs/'.$drupal_page_url[$i]);
      $this->assertRaw(t('views-table'), t('The table appears on the proper tab with results'));
      
      $query = "SELECT nid, title FROM {node} WHERE type = '".$sql_type[$i]."'";
      $result = db_query($query);
      foreach ($result as $record) {
        $nid = $record->nid;
        $title = $record->title;
        $this->drupalGet('node/'.$nid.'/edit');
        $this->drupalPost(NULL, array('title' => $this->randomName(10)), t('Delete'));
        $this->drupalPost(NULL, array(), t('Delete'));
        $this->assertRaw(t('<em class="placeholder">'.$title.'</em> has been deleted'), t('The node with nid ' . $nid . ' was properly deleted'));
      }
    }
    */
  }
}
